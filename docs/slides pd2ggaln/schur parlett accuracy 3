
julia> A = vars["A"];

julia> sqrtA = vars["sqrtA"];

julia> logA = vars["logA"];

julia> norm(expA-schurparlett(exp, A), Inf)/norm(expA, Inf)
1.2359906435952265e-13

julia> norm(sinA-schurparlett(sin, A), Inf)/norm(sinA, Inf)
1.1211259700629587e-13

julia> norm(sqrtA-schurparlett(sqrt, A), Inf)/norm(sqrtA, Inf)
5.2778257400950207e-14

julia> norm(logA-schurparlett(log, A), Inf)/norm(logA, Inf)
5.09481070681506e-14

julia> norm(expA-expm(A), Inf)/norm(expA, Inf)
1.4645948216671496e-14

julia> "funm(A, @sin)"
"funm(A, @sin)"

julia> 1.1e-13
1.1e-13

julia> norm(sqrtA-sqrtm(A), Inf)/norm(sqrtA, Inf)
5.276531027180038e-14

julia> norm(logA-logm(A), Inf)/norm(logA, Inf)
5.089079651063081e-14

julia> T, Q, vals = schur(B);

julia> T, Q, vals = schur(A);

julia> scatter(vals)

julia> S, p = MatFun.blockpattern(vals, Complex128);

julia> p
25

julia> S
100-element Array{Int64,1}:
  1
  2
  3
  4
  5
  6
  6
  7
  8
  9
  8
 10
  9
 11
 12
 13
  7
 13
 12
 14
 15
 12
 16
  ?
 12
 12
 12
 12
 24
 12
 12
 24
 12
 12
 12
 25
 25
 12
 12
 12
 12
 24
 24
 24
 24
 24

julia> scatter(vals[S .== 6])

julia> scatter(vals[S .== 24])

julia> scatter(vals[S .== 12])

julia> S, p = MatFun.blockpattern(vals, Complex128);

julia> S
100-element Array{Int64,1}:
  1
  2
  3
  4
  5
  6
  6
  7
  8
  9
  8
 10
  9
 11
 12
 13
  7
 13
 12
 14
 15
 12
 16
  ?
 12
 12
 12
 12
 24
 12
 12
 24
 12
 12
 12
 25
 25
 12
 12
 12
 12
 24
 24
 24
 24
 24

julia> scatter(vals[S .== 12])

julia> scatter(vals[S .== 12], vals)
ERROR: MethodError: no method matching min(::Complex{Float64}, ::Float64)
You may have intended to import Base.min
Closest candidates are:
  min(::Any, ::Any, ::Any, ::Any...) at C:\Users\rob\.julia\v0.6\NaNMath\src\NaNMath.jl:311
  min(::T<:AbstractFloat, ::T<:AbstractFloat) where T<:AbstractFloat at C:\Users\rob\.julia\v0.6\NaNMath\src\NaNMath.jl:
262
  min(::Real, ::Real) at C:\Users\rob\.julia\v0.6\NaNMath\src\NaNMath.jl:287
Stacktrace:
 [1] expand_extrema!(::Plots.Extrema, ::Complex{Float64}) at C:\Users\rob\.julia\v0.6\Plots\src\axes.jl:287
 [2] expand_extrema!(::Plots.Axis, ::Array{Complex{Float64},1}) at C:\Users\rob\.julia\v0.6\Plots\src\axes.jl:310
 [3] expand_extrema!(::Plots.Subplot{Plots.PlotlyBackend}, ::Dict{Symbol,Any}) at C:\Users\rob\.julia\v0.6\Plots\src\axe
s.jl:337
 [4] _expand_subplot_extrema(::Plots.Subplot{Plots.PlotlyBackend}, ::Dict{Symbol,Any}, ::Symbol) at C:\Users\rob\.julia\
v0.6\Plots\src\pipeline.jl:365
 [5] _process_seriesrecipe(::Plots.Plot{Plots.PlotlyBackend}, ::Dict{Symbol,Any}) at C:\Users\rob\.julia\v0.6\Plots\src\
pipeline.jl:401
 [6] _plot!(::Plots.Plot{Plots.PlotlyBackend}, ::Dict{Symbol,Any}, ::Tuple{Array{Complex{Float64},1},Array{Complex{Float
64},1}}) at C:\Users\rob\.julia\v0.6\Plots\src\plot.jl:233
 [7] #plot#176(::Array{Any,1}, ::Function, ::Array{Complex{Float64},1}, ::Vararg{Array{Complex{Float64},1},N} where N) a
t C:\Users\rob\.julia\v0.6\Plots\src\plot.jl:58
 [8] (::RecipesBase.#kw##plot)(::Array{Any,1}, ::RecipesBase.#plot, ::Array{Complex{Float64},1}, ::Array{Complex{Float64
},1}, ::Vararg{Array{Complex{Float64},1},N} where N) at .\<missing>:0
 [9] #scatter#632(::Array{Any,1}, ::Function, ::Array{Complex{Float64},1}, ::Vararg{Array{Complex{Float64},1},N} where N
) at C:\Users\rob\.julia\v0.6\RecipesBase\src\RecipesBase.jl:381
 [10] scatter(::Array{Complex{Float64},1}, ::Vararg{Array{Complex{Float64},1},N} where N) at C:\Users\rob\.julia\v0.6\Re
cipesBase\src\RecipesBase.jl:381

julia> B = randn(50, 50);

julia> T, Q, vals = schur(B);

julia> scatter(vals)

julia> C = B/15;

julia> T, Q, vals = schur(C);

julia> S, p = MatFun.blockpattern(vals, Complex128);

julia> p
23

julia> C = B/16;

julia> T, Q, vals = schur(C);

julia> S, p = MatFun.blockpattern(vals, Complex128);

julia> p
19

julia> vars = matread("C:/Users/rob/Downloads/vars3.mat")
Dict{String,Any} with 4 entries:
  "expA"  => Complex{Float64}[-18960.1-12293.0im 1296.52+840.616im . -1464.96-949.82im 2326.93+1508.69im; -1934.49-1254.

  "A"     => Complex{Float64}[10.0347+10.0im -0.0557195+0.0im . 0.0634833+0.0im -0.114754+0.0im; 0.118315+0.0im 10.005+.

  "sqrtA" => Complex{Float64}[3.47861+1.43734im -0.00682224+0.00278378im . 0.00777168-0.003168im -0.0140746+0.00578711i.

  "logA"  => Complex{Float64}[2.6509+0.783651im -0.00278476+0.00272688im . 0.00317326-0.00310264im -0.00573775+0.005678.


julia> A = vars["A"];

julia> expA = vars["expA"];

julia> logA = vars["logA"];

julia> sqrtA = vars["sqrtA"];

julia> T, Q, vals = schur(A);

julia> S, p = MatFun.blockpattern(vals, Complex128);

julia> p
21

julia> scatter(vals)

julia> norm(expA-schurparlett(exp, A), Inf)/norm(expA, Inf)
1.0486954181613998e-13

julia> norm(logA-schurparlett(log, A), Inf)/norm(logA, Inf)
3.01046371782184e-14

julia> norm(sqrtA-schurparlett(sqrt, A), Inf)/norm(sqrtA, Inf)
3.254804878480696e-14

julia> norm(expA-expm(A), Inf)/norm(expA, Inf)
1.0153612971852477e-14

julia> norm(sqrtA-sqrtm(A), Inf)/norm(sqrtA, Inf)
3.2296907719342563e-14

julia> norm(logA-logm(A), Inf)/norm(logA, Inf)
3.039771791068962e-14

julia> scatter(vals)

julia> vars = matread("C:/Users/rob/Downloads/vars3.mat")
Dict{String,Any} with 4 entries:
  "expA"  => Complex{Float64}[-17351.4-11250.0im -894.457-579.931im . -1085.86-704.03im -1201.23-778.828im; 245.109+158.

  "A"     => Complex{Float64}[9.94117+10.0im 0.0282269+0.0im . 0.0475048+0.0im 0.0705775+0.0im; 0.00318933+0.0im 9.9459.

  "sqrtA" => Complex{Float64}[3.46712+1.44211im 0.00343299-0.00135451im . 0.00581522-0.00236851im 0.00867881-0.00361313.

  "logA"  => Complex{Float64}[2.64622+0.788332im 0.00141073-0.00131725im . 0.00237525-0.00231933im 0.00352907-0.0035543.


julia> A = vars["A"];

julia> T, Q, vals = schur(A);

julia> scatter(vals)

julia> expA = vars["expA"];

julia> logA = vars["logA"];

julia> sqrtA = vars["sqrtA"];

julia> S, p = MatFun.blockpattern(vals, Complex128);

julia> p
17

julia> norm(expA-schurparlett(exp, A), Inf)/norm(expA, Inf)
1.46194649214643e-13

julia> norm(logA-schurparlett(log, A), Inf)/norm(logA, Inf)
4.08564283528245e-14

julia> norm(sqrtA-schurparlett(sqrt, A), Inf)/norm(sqrtA, Inf)
4.478144546872471e-14

julia> norm(expA-expm(A), Inf)/norm(expA, Inf)
1.0374858934084275e-14

julia> norm(logA-logm(A), Inf)/norm(logA, Inf)
4.0215955620504294e-14

julia> norm(sqrtA-sqrtm(A), Inf)/norm(sqrtA, Inf)
4.32659792665786e-14

julia>